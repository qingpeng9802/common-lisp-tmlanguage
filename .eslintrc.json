{
    // https://github.com/google/gts/blob/main/.eslintrc.json
    // https://chromium.googlesource.com/external/github.com/gpuweb/cts/+/refs/heads/main/.eslintrc.json
    // https://www.npmjs.com/package/@antfu/eslint-config-basic?activeTab=code
    // https://www.npmjs.com/package/@antfu/eslint-config-ts?activeTab=code

    "root": true,
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
        "project": ["syntaxes/scripts/tsconfig.json"],
        "ecmaVersion": 2022,
        "sourceType": "module"
    },
    "reportUnusedDisableDirectives": true,
    "plugins": [
        "node",
        "import",
        "@typescript-eslint",
        "unused-imports"
    ],
    "extends": [
        "eslint:recommended",
        "plugin:node/recommended",
        "plugin:import/errors",
        "plugin:import/warnings",
        "plugin:import/typescript",
        "plugin:@typescript-eslint/recommended"
    ],
    "rules": {
        "unused-imports/no-unused-imports": "warn",

        //"complexity": "warn",
        "max-len": [ "warn", {
                "code": 120,
                "ignoreRegExpLiterals": true,
                "ignoreStrings": true,
                "ignoreTemplateLiterals": true,
                "ignoreUrls": true
            } ],
        "brace-style": [ "warn", "1tbs", { "allowSingleLine": true } ],
        //ts "semi": [ 2, "always" ],
        //ts "quotes": [ "warn", "single", { "avoidEscape": true, "allowTemplateLiterals": true } ],
        "indent": [ "warn", 2, { "SwitchCase": 1, "ignoreComments": true } ],
        "no-tabs": "warn",
        "linebreak-style": [ "warn", "unix" ],
        "curly": "warn",
        "eqeqeq": "warn",
        "eol-last": "warn",
        "one-var": [ "warn", "never" ],
        "new-parens": "warn",
        "template-curly-spacing": ["warn"],
        "prefer-const": "warn",
        "prefer-arrow-callback": "warn",
        "prefer-rest-params": "warn",
        "prefer-spread": "warn",
        "prefer-template": "warn",
        "prefer-numeric-literals": "warn",
        "prefer-object-spread": "warn",
        "prefer-promise-reject-errors": [ "warn", { "allowEmptyReject": true } ],

        "no-useless-call": "warn",
        "no-useless-computed-key": "warn",
        "no-useless-concat": "warn",
        "no-constant-binary-expression": "warn",
        "no-extend-native": "warn",
        "no-extra-bind": "warn",
        "no-floating-decimal": "warn",
        "no-implicit-coercion": "warn",
        "no-lone-blocks": "warn",
        "no-return-await": "warn",
        "no-template-curly-in-string": "warn",
        "no-unmodified-loop-condition": "warn",
        "no-unneeded-ternary": "warn",
        "no-multiple-empty-lines": [ "warn", { "max": 2, "maxBOF": 0, "maxEOF": 1 } ],
        "no-trailing-spaces": "warn",
        "no-useless-rename": "warn",
        "no-caller": "warn",
        "no-eval": "warn",
        "no-new-wrappers": "warn",
        "no-constant-condition": "warn",
        "no-debugger": "warn",
        "no-cond-assign": [ "warn", "always" ],
        "no-restricted-syntax": [
            "error",
            "DebuggerStatement",
            "LabeledStatement",
            "WithStatement"
        ],
        // non-complete list of globals that are easy to access unintentionally
        "no-restricted-globals": [
            "warn", "name", "length", "event", "closed", "external", "status", "origin", "orientation", "context",
            { "name": "global", "message": "Use `globalThis` instead." },
            { "name": "self", "message": "Use `globalThis` instead." },
            { "name": "isNaN", "message": "Use `Number.isNaN` instead." },
            { "name": "isFinite", "message": "Use `Number.isFinite` instead." },
            { "name": "parseFloat", "message": "Use `Number.parseFloat` instead." },
            { "name": "parseInt", "message": "Use `Number.parseInt` instead." }
        ],
        //ts "no-throw-literal": "warn",
        //ts "no-implied-eval": "warn",
        //ts "no-unused-expressions": "warn",
        //ts "no-duplicate-imports": "warn",
        "array-bracket-spacing": [ "warn", "never" ],
        //ts "no-loss-of-precision": "warn",
        //ts "object-curly-spacing": [ "warn", "always" ],
        //ts "key-spacing": [ "warn", { "beforeColon": false, "afterColon": true } ],
        //ts "block-spacing": [ "warn", "always" ],
        //ts "comma-spacing": "warn",
        //ts "keyword-spacing": "warn",
        //ts "func-call-spacing": "warn",
        //ts "space-before-blocks": "warn",
        //ts "space-before-function-paren": [ "warn", { "anonymous": "always", "named": "never", "asyncArrow": "always" }],
        //ts "lines-between-class-members": [ "error", "always", { "exceptAfterSingleLine": true } ],
        //ts "no-extra-semi": "warn",
        //ts "no-loop-func": "warn",

        "no-self-compare": "error",
        "no-sequences": "error",
        "no-void": "error",
        "no-var": "error",
        "block-scoped-var": "error",
        //ts "no-dupe-class-members": "error",

        "no-useless-escape": "off",
        "no-empty": "off",
        //ts "no-unused-vars": "off",

        // best-practice
        "no-console": [ "warn", { "allow": [ "warn", "error" ] } ],
        "no-alert": "warn",
        "no-case-declarations": "warn",
        "no-multi-spaces": "warn",
        "no-multi-str": "warn",
        "no-with": "warn",
        "array-callback-return": "error",
        "vars-on-top": "error",
        "consistent-return": "warn",
        "no-return-assign": "warn",
        //ts "no-invalid-this": "warn",
        //ts "no-redeclare": "warn",
        //ts "require-await": "warn"
        //ts "no-use-before-define": [ "error", { "functions": false, "classes": false, "variables": true } ],

        // node
        "node/no-missing-import": "off",
        "node/no-missing-require": "off",
        "node/no-unsupported-features/es-syntax": "off",
        //ts "node/no-empty-function": "off",

        // typescript-eslint override eslint
        "@typescript-eslint/semi": [ 2, "always" ],
        "@typescript-eslint/quotes": [ "warn", "single", { "avoidEscape": true, "allowTemplateLiterals": true } ],
        "@typescript-eslint/require-await": "warn",

        "@typescript-eslint/block-spacing": [ "warn", "always" ],
        "@typescript-eslint/comma-spacing": "warn",
        "@typescript-eslint/func-call-spacing": "warn",
        "@typescript-eslint/key-spacing": [ "warn", { "beforeColon": false, "afterColon": true } ],
        "@typescript-eslint/keyword-spacing": "warn",
        "@typescript-eslint/lines-between-class-members": [ "error", "always", { "exceptAfterSingleLine": true } ],
        "@typescript-eslint/object-curly-spacing": [ "warn", "always" ],
        "@typescript-eslint/space-before-blocks": "warn",
        "@typescript-eslint/space-before-function-paren": [ "warn", {
                "anonymous": "always", "named": "never", "asyncArrow": "always"
            } ],

        // "@typescript-eslint/no-duplicate-imports": "warn", // deprecated to import/
        "@typescript-eslint/no-extra-semi": "warn",
        "@typescript-eslint/no-loop-func": "warn",
        "@typescript-eslint/no-loss-of-precision": "warn",
        "@typescript-eslint/no-redeclare": "warn",
        "@typescript-eslint/no-implied-eval": "warn",
        "@typescript-eslint/no-invalid-this": "warn",
        "@typescript-eslint/no-throw-literal": "warn",
        "@typescript-eslint/no-unused-expressions": "warn",
        "@typescript-eslint/no-use-before-define": [ "error", {
                "functions": false, "classes": false, "variables": true
            } ],
        "@typescript-eslint/no-dynamic-delete": "error",
        "@typescript-eslint/no-dupe-class-members": "error",
        "@typescript-eslint/no-extraneous-class": "error",
        "@typescript-eslint/no-meaningless-void-operator": "error",
        "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",

        // typescript-eslint only warn
        "@typescript-eslint/strict-boolean-expressions": [ "warn", {
                "allowString": true,
                "allowNumber": false,
                "allowNullableObject": false,
                "allowNullableBoolean": false,
                "allowNullableString": false,
                "allowNullableNumber": false,
                "allowNullableEnum": false,
                "allowAny": true,
                "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": false
            }
        ],
        "@typescript-eslint/ban-types": [ "error", {
                "extendDefaults": false,
                "types": {
                    "String": {
                        "message": "Use string instead",
                        "fixWith": "string"
                    },
                    "Boolean": {
                        "message": "Use boolean instead",
                        "fixWith": "boolean"
                    },
                    "Number": {
                        "message": "Use number instead",
                        "fixWith": "number"
                    },
                    "Symbol": {
                        "message": "Use symbol instead",
                        "fixWith": "symbol"
                    }
                }
            }
        ],
        "@typescript-eslint/explicit-member-accessibility": [ "warn",
            { "accessibility": "explicit", "overrides": { "accessors": "off", "constructors": "off" } }
        ],
        "@typescript-eslint/adjacent-overload-signatures": "warn",
        "@typescript-eslint/await-thenable": "warn",
        "@typescript-eslint/ban-ts-comment": "warn",
        "@typescript-eslint/restrict-plus-operands": "warn",
        "@typescript-eslint/restrict-template-expressions": "warn",
        "@typescript-eslint/triple-slash-reference": "warn",
        "@typescript-eslint/unbound-method": "warn",
        "@typescript-eslint/member-delimiter-style": "warn",
        "@typescript-eslint/naming-convention": [ "warn", {
                "selector": "class",
                "format": [ "PascalCase" ]
            }
        ],
        "@typescript-eslint/type-annotation-spacing": "warn",
        "@typescript-eslint/consistent-type-assertions": "warn",
        "@typescript-eslint/consistent-type-imports": "warn",
        "@typescript-eslint/consistent-type-definitions": "warn",
        "@typescript-eslint/non-nullable-type-assertion-style": "warn",

        "@typescript-eslint/no-empty-interface": "warn",
        "@typescript-eslint/no-extra-non-null-assertion": "warn",
        "@typescript-eslint/no-floating-promises": "warn",
        "@typescript-eslint/no-for-in-array": "warn",
        "@typescript-eslint/no-misused-new": "warn",
        "@typescript-eslint/no-misused-promises": "warn",
        "@typescript-eslint/no-namespace": "warn",
        "@typescript-eslint/no-non-null-asserted-optional-chain": "warn",
        "@typescript-eslint/no-this-alias": "warn",
        "@typescript-eslint/no-var-requires": "warn",
        "@typescript-eslint/no-unnecessary-type-assertion": "warn",
        "@typescript-eslint/no-unnecessary-type-constraint": "warn",
        "@typescript-eslint/no-require-imports": "warn",

        "@typescript-eslint/prefer-ts-expect-error": "warn",
        "@typescript-eslint/prefer-as-const": "warn",
        "@typescript-eslint/prefer-for-of": "warn",
        "@typescript-eslint/prefer-namespace-keyword": "warn",
        "@typescript-eslint/prefer-includes": "warn",
        "@typescript-eslint/prefer-literal-enum-member": [ "warn", { "allowBitwiseExpressions": true } ],
        "@typescript-eslint/prefer-reduce-type-parameter": "warn",

        // typescript-eslint off
        "@typescript-eslint/no-non-null-assertion": "off", // make sure checked by `if`
        "@typescript-eslint/no-unused-vars": "off", //js
        "@typescript-eslint/no-empty-function": "off", //node
        "@typescript-eslint/no-explicit-any": "off",

        // do not have to comply
        //"@typescript-eslint/no-unsafe-argument": "warn",
        //"@typescript-eslint/no-unsafe-assignment": "warn",
        //"@typescript-eslint/no-unsafe-call": "warn",
        //"@typescript-eslint/no-unsafe-member-access": "warn",
        //"@typescript-eslint/no-unsafe-return": "warn",

        // import
        "import/consistent-type-specifier-style": [ "warn", "prefer-top-level" ],
        "import/no-absolute-path": "warn",
        "import/no-default-export": "warn",
        "import/no-dynamic-require": "warn",
        "import/no-self-import": "warn",
        "import/no-useless-path-segments": "warn",
        "import/order": [ "warn", {
                "groups": [ "builtin", "external", "internal", "parent", "sibling", "index" ],
                "newlines-between": "always",
                "alphabetize": { "order": "asc", "caseInsensitive": false }
            }
        ],
        "import/first": "warn",
        "import/no-mutable-exports": "warn",
        "import/newline-after-import": [ "warn", { "count": 1 } ],
        "import/no-duplicates": "warn",
        // layer enforcement
        "import/no-restricted-paths": [
            "error",
            {
                "zones": [
                    // layer 0
                    {
                        "target": "src/web/common",
                        "from": "src/web",
                        "message": "[layer 0] src/web/common"
                    },
                    {
                        "target": "src/web/doc",
                        "from": "src/web",
                        "except": [ "cl_data", "common" ],
                        "message": "[layer 0] src/web/doc"
                    },
                    {
                        "target": "src/web/collect_info",
                        "from": "src/web",
                        "except": [ "collect_info", "common" ],
                        "message": "[layer 0] src/web/collect_info"
                    },
                    // layer 1
                    {
                        "target": "src/web/builders",
                        "from": [ "src/web/entry", "src/web/extension.ts", "src/web/provider_interface" ],
                        "message": "[layer 1] src/web/builders"
                    },
                    // layer 2
                    {
                        "target": "src/web/provider_interface",
                        "from": [ "src/web/entry", "src/web/extension.ts" ],
                        "message": "[layer 2] src/web/provider_interface"
                    },
                    // layer 3
                    {
                        "target": "src/web/entry",
                        "from": "src/web/extension.ts",
                        "message": "[layer 3] src/web/entry"
                    }
                ]
            }
        ],

        "node/no-unsupported-features/node-builtins": ["error", {
            "version": ">=20.8.0"
        }],
        "node/no-unpublished-import": ["error", {
            "allowModules": ["vscode-oniguruma", "vscode-textmate", "js-yaml"]
        }]
    },

    "settings": {
        "import/parsers": {
            "@typescript-eslint/parser": [ ".ts", ".tsx" ]
        },
        "import/resolver": {
            "node": { "extensions": [ ".ts", ".tsx", ".d.ts" ] },
            "typescript": {
                // always try to resolve types under `<root>@types` directory even it does not contain any source code, like `@types/unist`
                "alwaysTryTypes": true,
                "project": "."
            }
        }
    },
    "ignorePatterns": [
        "**/*.d.ts",
        "syntaxes/scripts/gen_record.mjs"
    ]
}